{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13680\viewh13960\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Unit 4 notes to reviewer / grader:
\b0 \
\
Excellent set of exercises (Unit 4 + Unit 5).  The experience for students of building the back-end, and proving it with unit tests, separately from the front-end will be valuable for your student.\
\
I tried (successfully, I believe) to implement a form of Role Based Access Control (RBAC). The entrant object has information about the entrant, but does not include access, discounts, or skip information. The 'gates' (rides, vendors) objects have info about the gate, but, again, do not need access, skip, etc., knowledge -- that is addressed in PermissionsAndBenefits.  That way rules can change without needing to update user or gate records.  Entrants and gates can be added to the database without updating either about permissions / benefits.\
\
I modeled Pass with a function to return the data needed to print a pass, so it could have different functions that would actually do the different types of "printing" (paper ticket, mobile, etc.)\
\
I wrote tests to confirm correct handling of the role access / benefits without actual entrants or gates (since it just depends upon role types). \
\
I decided to add plist files with samples of each, implemented loaders for them, and print passes for all of them for all gates to confirm operation.\
\
Interesting question about handling FreeChild.  Really, they are just a ClassicGuest whose birthdate may give them free access.  I suppose the only reason to have the definition is to get their birthdate in the first place. It would make the most sense to check their age on entry to the park, but this exercise doesn't speak to that part. \
And one would probably change them from FreeChild to ClassicGuest on the first visit after they turn 6.  For this exercise, I just mark their pass to indicate "Free" if they are 5 or under.\
\

\b Question:
\b0  Making properties of the Entrant subclasses variable instead of constant allows one to create an object in the test setup, and then modify values to test various situations.  BUT, in the live app it might make more sense for the property to be a constant. I suppose one would just need to 'work harder' (create an object each time they wanted to test a data variant) to test that those variants are properly handled.\
\

\b ------------------------------------------------------------------------------------------------------------------------------------------------------\
Unit 5 notes to reviewer / grader:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\b0 \cf0 \
I loved the way the back-end requirements were expanded, which forced everyone to look at their initial implementation. Adding the Contractor access rules by company, for instance, complicated my access-by-role. I moved my access rules out of logic and into data (plist), which would certainly be how a commercial application would be written (using a DB).\
\
For changing submenus, I thought about whether it would be better to create a view for each different submenu (4, with the current data), but it seemed to make more sense to just have a single stack view and dynamically change the label (and tag?) and hide buttons when fewer were needed. That lets the stack view handle the layout work for that view.\
\
My work and family circumstances changed right at the beginning of this unit, and so I had a hard time devoting time to working on it. As a result, this was a pretty expensive unit, and so I am going to move on rather than doing the 'exceeds expectations' parts, hopefully just for this unit.\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}